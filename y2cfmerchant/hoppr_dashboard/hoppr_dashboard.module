<?php
//Y2CFMANAGER/Admin and Ops Head Dashboard
//Total offers uploaded  by all related executives
function date_filter_for_reports() {
  if (isset($_GET['entry_date']) && $_GET['entry_date']!="") {
    $curdate_1 = explode("/", $_GET['entry_date']);
    $entry_date = mktime(0, 0, 1, $curdate_1[0], $curdate_1[1], $curdate_1[2]);
    $sql_merchants .= " and nn.created >= '" . $entry_date . "'  ";
  }
  if (isset($_GET['exit_date']) && $_GET['exit_date']!="") {
    $curdate_1 = explode("/", $_GET['exit_date']);
    $entry_date = mktime(23, 59, 0, $curdate_1[0], $curdate_1[1], $curdate_1[2]);
    $sql_merchants .= " and nn.created <= '" . $entry_date . "'  ";
  }
  return $sql_merchants;
}
//City wise filter
function city_wise_filter_for_all_offers() {
  if (isset($_GET['city']) && $_GET['city']!= "" ) {
    $sql_merchants .= " and ctmd.field_hop_signup_city_value = '" . $_GET['city'] . "' ";
  }
  return $sql_merchants;
}
function reporting_manager_wise_filter() {
	global $user;
	$rs_rid  = get_user_role_id($user->uid);
	if($rs_rid == 'reporting manager') {
	    $u_arr = get_all_salesman_of_rm($user->uid);
	    $new_array = array();
	    foreach($u_arr as $result_num => $sub_array) {
	      $new_array[$result_num] = $sub_array['uid'];
	    }
	    $users_uid = implode(",", $new_array);
	    $all_sm_of_smngr = get_all_salesman_of_all_salesmanager($user->uid);
	    if(!empty($all_sm_of_smngr)){
	      $sql_offer = " and (nn.uid in (".$users_uid.") OR nn.uid in (".$all_sm_of_smngr.") OR nn.uid='".$user->uid."') ";
	    }else
	    {
	      $sql_offer = " and (nn.uid in (".$users_uid.") OR  nn.uid='".$user->uid."') ";

	    }
	  }
	  return $sql_offer;
}
function salesmanager_wise_filter() {
	global $user;
  $rs_rid  = get_user_role_id($user->uid);
if($rs_rid == 'salesmanager') {
    $u_arr = get_all_salesman_of_rm($user->uid);
    $new_array = array();
    foreach($u_arr as $result_num => $sub_array) {
      $new_array[$result_num] = $sub_array['uid'];
    }
    $users_uid = implode(",", $new_array);
    $sql_offer = " and (nn.uid in (".$users_uid.") OR  nn.uid='".$user->uid."') ";
  }
  return $sql_offer;
}
function salesperson_wise_filter() {
	global $user;
  $rs_rid  = get_user_role_id($user->uid);
	if($rs_rid == 'salesperson') {
	    $sql_offer = " and ( nn.uid='".$user->uid."') ";
	  }
	  return $sql_offer;
}
function hoppr_ops_total_offer() {
  $sql_count_offer = "SELECT count(nn.nid) as total_mer_offer FROM {node} nn inner join {content_type_offer_detail} ctmd on ctmd.vid=nn.vid where nn.type= 'offer_detail' ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}

function hoppr_ops_total_local_offer($merchant_flag) {
  $sql_count_offer = "SELECT count(nn.nid) as total_mer_offer FROM {node} nn inner join {content_type_offer_detail} ctmd on ctmd.vid=nn.vid where nn.type= 'offer_detail' ";
  if($merchant_flag == 'National') {
  	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value = 'National' ";
  }elseif($merchant_flag == 'local'){
  	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  }
  
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  //print $sql_count_offer;
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}

function total_merchant_outlets() {
$sql_count_offer = "SELECT count(n.nid) as total_mer_offer FROM {content_type_offer_detail} ctmd inner join {node} nn on ctmd.vid = nn.vid left outer join {content_type_merchant_outlet} coutlet on ctmd.nid = coutlet.field_hopper_merchant_olt_nid inner join {node} n on coutlet.vid = n.vid inner join {node_revisions} nr on n.vid=nr.vid ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
  }

function total_local_merchant_outlets($merchant_flag) {
$sql_count_offer = "SELECT count(n.nid) as total_mer_offer FROM {content_type_offer_detail} ctmd inner join {node} nn on ctmd.vid = nn.vid left outer join {content_type_merchant_outlet} coutlet on ctmd.nid = coutlet.field_hopper_merchant_olt_nid inner join {node} n on coutlet.vid = n.vid inner join {node_revisions} nr on n.vid=nr.vid ";

	if($merchant_flag == 'National') {
		$sql_count_offer .= " and ctmd.field_hop_tieup_type_value = 'National' ";
	}elseif($merchant_flag == 'local'){
		$sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
	}



  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}

//Offer approved,rejected by ops head
function get_overall_count_wocon() {
  $sql_count_offer = "SELECT count(n.nid) as total_mer_offer FROM {content_type_offer_detail} ctmd inner join {node} nn on ctmd.vid = nn.vid left outer join {content_type_merchant_outlet} coutlet on ctmd.nid = coutlet.field_hopper_merchant_olt_nid inner join {node} n on coutlet.vid = n.vid inner join {node_revisions} nr on n.vid=nr.vid ";
  return $sql_count_offer;
}
//Accepted, Rejected and On Hold by RM/SM
function hoppr_ops_total_offer_approved_by_rm_or_sm($rm_sts, $merchant_flag) {
  //$sql_count_offer = "SELECT count(nn.vid) as total_mer_offer FROM {node} nn inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nn.vid where ctmd.field_hoppr_new_rmsmsts_value= '".$rm_sts."' ";
  $sql_count_offer = get_overall_count_wocon();
  
  if($merchant_flag == 'National') {
  	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value = 'National' ";
  }elseif($merchant_flag == 'local'){
  	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  }
  
  
  $sql_count_offer .= " and ctmd.field_hoppr_new_rmsmsts_value= '".$rm_sts."' ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
function hoppr_ops_mail_communication_to_merchants($mail_comm_sts) {
	$sql_count_offer = get_overall_count_wocon();
    $sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
    //$sql_count_offer .= " and coutlet.field_hop_ops_oh_ds_sts_mo_value= 'Accepted' ";
    $sql_count_offer .= " and (ctmd.field_hop_offer_ops_status_value= 'Approved'  or ctmd.field_hop_ops_all_remark_value ='Approved' or coutlet.field_hop_ops_all_remrk_mo_value ='Approved' or coutlet.field_hop_offer_ops_status_mo_value ='Approved') ";
	$sql_count_offer .= " and ctmd.field_hop_ops_agr_sta_value= 'Approved' ";
  $sql_count_offer .= " and (ctmd.field_hop_ops_pro_keywords_value IS NOT NULL or coutlet.field_hop_ops_pro_kwds_mo_value IS NOT NULL) ";
  $sql_count_offer .= " and coutlet.field_hoppr_ofr_upld_value ='Complete' ";
  $sql_count_offer .= " and (ctmd.field_hoppr_creativedsgnabu_value ='Yes' or coutlet.field_hoppr_creativedsgnab_out_value ='Yes') ";
  $sql_count_offer .= " and (ctmd.field_hop_pos_oa_status_value = 'Delivered' or coutlet.field_hop_pos_oa_status_mo_value ='Delivered') ";
  $sql_count_offer .= " and (ctmd.field_hop_ops_glivsts_value ='Done' or coutlet.field_hop_ops_glivsts_mo_value ='Done' or coutlet.field_sales_hop_ops_glivsts_mo_value ='Done') ";
  $sql_count_offer .= " and ctmd.field_hoppr_new_mail_comm_value= '".$mail_comm_sts."' ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
function hoppr_ops_total_offer_approved_by_opshead_exe($opsexe_sts) {
  $sql_count_offer = get_overall_count_wocon();
  $sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
	$sql_count_offer .= " and coutlet.field_hop_ops_oh_ds_sts_mo_value= '".$opsexe_sts."' ";
	$sql_count_offer .= date_filter_for_reports();
	$sql_count_offer .= city_wise_filter_for_all_offers();
	$sql_count_offer .= reporting_manager_wise_filter();
	$sql_count_offer .= salesmanager_wise_filter();
	$sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//approved,rejected,onhold,followup, by ops oe
function hoppr_ops_total_offer_approved_by_oe($ops_exe_sts, $merchant_flag) {
	$sql_count_offer = get_overall_count_wocon();
	$sql_count_offer .= " and ctmd.field_hoppr_new_rmsmsts_value= 'Accepted' ";
	
	if($merchant_flag == 'National') {
		$sql_count_offer .= " and ctmd.field_hop_tieup_type_value = 'National' ";
	}elseif($merchant_flag == 'local'){
		$sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
	}
	
	
	//$sql_count_offer .="and coutlet.field_hop_ops_oh_ds_sts_mo_value='Accepted' ";
  $sql_count_offer .= " and (ctmd.field_hop_offer_ops_status_value LIKE '" . $ops_exe_sts . "%'  or ctmd.field_hop_ops_all_remark_value LIKE '" . $ops_exe_sts . "%' or coutlet.field_hop_ops_all_remrk_mo_value LIKE '" . $ops_exe_sts . "%' or coutlet.field_hop_offer_ops_status_mo_value LIKE '" . $ops_exe_sts . "%') ";
  	$sql_count_offer .= date_filter_for_reports();
	$sql_count_offer .= city_wise_filter_for_all_offers();
	$sql_count_offer .= reporting_manager_wise_filter();
	$sql_count_offer .= salesmanager_wise_filter();
	$sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//Total pendings --- total offer- total processed offers by ops oe
function hoppr_ops_total_offer_pending_by_oe() {
  $total_offers = hoppr_ops_total_offer();
  $total_app_ofrs = hoppr_ops_total_offer_approved_by_oe('Approved');
  $total_onhold_ofrs = hoppr_ops_total_offer_approved_by_oe('On hold');
  $total_follwup_ofrs = hoppr_ops_total_offer_approved_by_oe('Follow up');
  $total_rej_ofrs = hoppr_ops_total_offer_approved_by_oe('Rejected');
  $tot_all_pro_ofrs = $total_app_ofrs + $total_onhold_ofrs + $total_follwup_ofrs + $total_rej_ofrs;
  $tot_pending_ofrs = $total_offers - $tot_all_pro_ofrs;
  return $tot_pending_ofrs;
}
//Docs --- total recieved, approved,rejected, Not received
function hoppr_ops_total_offer_agreement_recived_by_ops_mngr() {
  $sql_count_offer_obj = "select count(distinct ct.vid) as app_ofrs from content_field_docs_upload ct inner join node nn on nn.vid=ct.vid where ct.field_docs_upload_fid!='NULL' group by ct.nid ";
  //$sql_count_offer_obj .= date_filter_for_reports();
  //$sql_count_offer_obj .= city_wise_filter_for_all_offers();

  $sql_count_offer = db_query($sql_count_offer_obj);
  $docs_arr = array();
  while($rsdocs = db_fetch_array($sql_count_offer)) {
    $docs_arr[] = $rsdocs;
  }
  $tot_docs = count($docs_arr);
  return $tot_docs;
}
function hoppr_ops_total_offer_agreement_approved_by_ops_mngr($opsmngr_sts, $merchant_flag) {
	$sql_count_offer = get_overall_count_wocon();
    
    if($merchant_flag == 'National') {
    	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value = 'National' ";
    }elseif($merchant_flag == 'local'){
    	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
    }
    
    //$sql_count_offer .= " and coutlet.field_hop_ops_oh_ds_sts_mo_value= 'Accepted' ";
    $sql_count_offer .= " and ctmd.field_hoppr_new_rmsmsts_value= 'Accepted' ";
    $sql_count_offer .= " and (ctmd.field_hop_offer_ops_status_value= 'Approved'  or ctmd.field_hop_ops_all_remark_value ='Approved' or coutlet.field_hop_ops_all_remrk_mo_value ='Approved' or coutlet.field_hop_offer_ops_status_mo_value ='Approved') ";
	$sql_count_offer .= " and ctmd.field_hop_ops_agr_sta_value= '".$opsmngr_sts."' ";
    
	$sql_count_offer .= date_filter_for_reports();
	$sql_count_offer .= city_wise_filter_for_all_offers();
	$sql_count_offer .= reporting_manager_wise_filter();
	$sql_count_offer .= salesmanager_wise_filter();
	$sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
function hoppr_ops_total_offer_diff_status_by_tc($tc_sts) {
	$sql_count_offer = get_overall_count_wocon();
    $sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  $sql_count_offer .= " and (ctmd.field_hop_ops_all_remark_value LIKE '" . trim($tc_sts) . "%' or coutlet.field_hop_ops_all_remrk_mo_value LIKE '" . trim($tc_sts) . "%') ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
function hoppr_ops_total_evaluation_status_by_products($pro_sts=NULL, $merchant_flag) {
  $sql_count_offer = get_overall_count_wocon();
  /*
  if($merchant_flag == 'National') {
  	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value = 'National' ";
  }elseif($merchant_flag == 'local'){
  	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  }*/
  $sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  //$sql_count_offer .= " and coutlet.field_hop_ops_oh_ds_sts_mo_value= 'Accepted' ";
    $sql_count_offer .= " and (ctmd.field_hop_offer_ops_status_value= 'Approved'  or ctmd.field_hop_ops_all_remark_value ='Approved' or coutlet.field_hop_ops_all_remrk_mo_value ='Approved' or coutlet.field_hop_offer_ops_status_mo_value ='Approved') ";
	$sql_count_offer .= " and ctmd.field_hop_ops_agr_sta_value= 'Approved' ";
    //$sql_count_offer .= " and (ctmd.field_hop_pro_evaluation_status_value LIKE '" . trim($pro_sts) . "%' or coutlet.field_hop_pro_eval_status_value LIKE '" . trim($pro_sts) . "%') ";
  $sql_count_offer .= " and (ctmd.field_hop_ops_pro_keywords_value IS NOT NULL or coutlet.field_hop_ops_pro_kwds_mo_value IS NOT NULL) ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
function hoppr_ops_total_creativedesign($cr_sts) {
  $sql_count_offer = get_overall_count_wocon();
  $sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  //$sql_count_offer .= " and coutlet.field_hop_ops_oh_ds_sts_mo_value= 'Accepted' ";
    $sql_count_offer .= " and (ctmd.field_hop_offer_ops_status_value= 'Approved'  or ctmd.field_hop_ops_all_remark_value ='Approved' or coutlet.field_hop_ops_all_remrk_mo_value ='Approved' or coutlet.field_hop_offer_ops_status_mo_value ='Approved') ";
	$sql_count_offer .= " and ctmd.field_hop_ops_agr_sta_value= 'Approved' ";
  $sql_count_offer .= " and (ctmd.field_hop_ops_pro_keywords_value IS NOT NULL or coutlet.field_hop_ops_pro_kwds_mo_value IS NOT NULL) ";
  $sql_count_offer .= " and coutlet.field_hoppr_ofr_upld_value ='Complete' ";
  $sql_count_offer .= " and (ctmd.field_hoppr_creativedsgnabu_value LIKE '" . trim($cr_sts) . "%' or coutlet.field_hoppr_creativedsgnab_out_value LIKE '" . trim($cr_sts) . "%') ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//POS sts   field_hop_pos_oa_status   field_hop_pos_oa_status_mo
function hoppr_ops_total_pos_status($pos_sts) {
  $sql_count_offer = get_overall_count_wocon();
  $sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  //$sql_count_offer .= " and coutlet.field_hop_ops_oh_ds_sts_mo_value= 'Accepted' ";
    $sql_count_offer .= " and (ctmd.field_hop_offer_ops_status_value= 'Approved'  or ctmd.field_hop_ops_all_remark_value ='Approved' or coutlet.field_hop_ops_all_remrk_mo_value ='Approved' or coutlet.field_hop_offer_ops_status_mo_value ='Approved') ";
	$sql_count_offer .= " and ctmd.field_hop_ops_agr_sta_value= 'Approved' ";
  $sql_count_offer .= " and (ctmd.field_hop_ops_pro_keywords_value IS NOT NULL or coutlet.field_hop_ops_pro_kwds_mo_value IS NOT NULL) ";
  $sql_count_offer .= " and coutlet.field_hoppr_ofr_upld_value ='Complete' ";
  $sql_count_offer .= " and (ctmd.field_hoppr_creativedsgnabu_value ='Yes' or coutlet.field_hoppr_creativedsgnab_out_value ='Yes') ";
  $sql_count_offer .= " and (ctmd.field_hop_pos_oa_status_value LIKE '" . trim($pos_sts) . "%' or coutlet.field_hop_pos_oa_status_mo_value LIKE '" . trim($pos_sts) . "%') ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}

//Go live sts   field_hop_ops_glivsts   field_hop_ops_goliv_label_mo   field_sales_hop_ops_glivsts_mo
function hoppr_ops_total_golive_status($gliv_sts) {
  $sql_count_offer = get_overall_count_wocon();
  $sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  //$sql_count_offer .= " and coutlet.field_hop_ops_oh_ds_sts_mo_value= 'Accepted' ";
    $sql_count_offer .= " and (ctmd.field_hop_offer_ops_status_value= 'Approved'  or ctmd.field_hop_ops_all_remark_value ='Approved' or coutlet.field_hop_ops_all_remrk_mo_value ='Approved' or coutlet.field_hop_offer_ops_status_mo_value ='Approved') ";
	$sql_count_offer .= " and ctmd.field_hop_ops_agr_sta_value= 'Approved' ";
  $sql_count_offer .= " and (ctmd.field_hop_ops_pro_keywords_value IS NOT NULL or coutlet.field_hop_ops_pro_kwds_mo_value IS NOT NULL) ";
  $sql_count_offer .= " and coutlet.field_hoppr_ofr_upld_value ='Complete' ";
  $sql_count_offer .= " and (ctmd.field_hoppr_creativedsgnabu_value ='Yes' or coutlet.field_hoppr_creativedsgnab_out_value ='Yes') ";
  $sql_count_offer .= " and (ctmd.field_hop_pos_oa_status_value = 'Delivered' or coutlet.field_hop_pos_oa_status_mo_value ='Delivered') ";
  $sql_count_offer .= " and (ctmd.field_hop_ops_glivsts_value LIKE '" . trim($gliv_sts) . "%' or coutlet.field_hop_ops_glivsts_mo_value LIKE '" . trim($gliv_sts) . "%' or coutlet.field_sales_hop_ops_glivsts_mo_value LIKE '" . trim($gliv_sts) . "%') ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//offer upload status
function hoppr_ops_total_offerupload_status($ofruplsts, $merchant_flag) {
  $sql_count_offer = get_overall_count_wocon();
  $sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  /*
  if($merchant_flag == 'National') {
  	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value = 'National' ";
  }elseif($merchant_flag == 'local'){
  	$sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  }
  */
  //$sql_count_offer .= " and coutlet.field_hop_ops_oh_ds_sts_mo_value= 'Accepted' ";
    $sql_count_offer .= " and (ctmd.field_hop_offer_ops_status_value= 'Approved'  or ctmd.field_hop_ops_all_remark_value ='Approved' or coutlet.field_hop_ops_all_remrk_mo_value ='Approved' or coutlet.field_hop_offer_ops_status_mo_value ='Approved') ";
	$sql_count_offer .= " and ctmd.field_hop_ops_agr_sta_value= 'Approved' ";
  $sql_count_offer .= " and (ctmd.field_hop_ops_pro_keywords_value IS NOT NULL or coutlet.field_hop_ops_pro_kwds_mo_value IS NOT NULL) ";
  $sql_count_offer .= " and coutlet.field_hoppr_ofr_upld_value LIKE '" . trim($ofruplsts) . "%' ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//offer testing status
function hoppr_ops_total_offertesting_status($ofrtstingsts) {
  $sql_count_offer = get_overall_count_wocon();
  $sql_count_offer .= " and ctmd.field_hop_tieup_type_value != 'National' ";
  $sql_count_offer .= " and coutlet.field_hoppr_offr_test_value LIKE '" . trim($ofrtstingsts) . "%' ";
  $sql_count_offer .= date_filter_for_reports();
  $sql_count_offer .= city_wise_filter_for_all_offers();
  $sql_count_offer .= reporting_manager_wise_filter();
  $sql_count_offer .= salesmanager_wise_filter();
  $sql_count_offer .= salesperson_wise_filter();
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}





function hoppr_ops_total_golive_training_done_by_ops_mngr() {

}
//approved,onhold,rejected,followup by TC
function hoppr_ops_total_offer_approved_by_tc($tc_sts) {
  $sql_count_offer = "SELECT count(nn.nid) as total_mer_offer FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where ctmd.field_hop_ops_all_remark_value= '".$tc_sts."' ";
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//approved,rejected by Product Team
function hoppr_ops_total_offer_app_rej_by_pro($pro_sts) {
  $sql_count_offer = "SELECT count(nn.nid) as total_mer_offer FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where ctmd.field_hop_pro_evaluation_status_value= '".$pro_sts."' ";
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//total pro keywors count by pro team
function hoppr_ops_total_offer_keyword_by_product_ops() {
  $sql_count_offer = "SELECT count(ctmd.field_hop_ops_pro_keywords_value) as total_mer_offer FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where ctmd.field_hop_ops_pro_keywords_value IS NOT NULL ";
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//total creative design done
function hoppr_ops_total_offer_creative_design_by_creativeops() {
  $sql_count_offer = "SELECT count(nn.nid) as total_mer_offer FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where ctmd.field_hoppr_creativedsgnabu_value= 'Yes' ";
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//Pos delivered, not delivered
function hoppr_ops_total_offer_pos_delvered_posbrand($pos_del) {
  $sql_count_offer = "SELECT count(nn.nid) as total_mer_offer FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where ctmd.field_hop_pos_oa_status_value= '".$pos_del."' ";
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}


/*Salesperson Dashboard
Total offers uploaded by each Salesperson
* */
function hoppr_get_all_offer_by_each_salesperson($salesperson_uid) {
  $sql_count_offer = "SELECT count(nn.nid) as total_mer_offer FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where nn.uid= '" . $salesperson_uid . "' ";
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//OE approved, rejected, onhold, followup
function hoppr_get_all_offer_approve_by_oe($salesperson_uid,$oe_sts) {
  $sql_count_offer = "SELECT count(nn.nid) as total_mer_offer FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where nn.uid= '" . $salesperson_uid . "' and ctmd.field_hop_ops_exe_sta_value='".$oe_sts."'  ";
  $dsr_mer_offer = db_fetch_array(db_query($sql_count_offer));
  $dsr_offer_count = $dsr_mer_offer['total_mer_offer'];
  return $dsr_offer_count;
}
//Received Approved  Rejected   Not Received
//Total docs Recieved
function hoppr_get_all_docs_recvd($salesperson_uid) {
  $sql_count_offer = db_query("select count(distinct ct.vid) as app_ofrs from content_field_docs_upload ct inner join node n on n.vid=ct.vid where n.uid='".$salesperson_uid."' and ct.field_docs_upload_fid!='NULL' group by ct.nid ");
  $docs_arr = array();
  while($rsdocs = db_fetch_array($sql_count_offer)) {
    $docs_arr[] = $rsdocs;
  }
  $tot_docs = count($docs_arr);
  return $tot_docs;
}
//Total docs approved
function hoppr_total_docs_approved($salesperson_uid) {
	$sql_total_docs_app = "SELECT count(nn.nid) as total_docs_app FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where nn.uid= '" . $salesperson_uid . "' and ctmd.field_hop_ops_agr_sta_value='Approved'  ";
	$rs_total_docs_app_obj = db_fetch_array(db_query($sql_total_docs_app));
  $rs_total_docs_app = $rs_total_docs_app_obj['total_docs_app'];
  return $rs_total_docs_app;
}
//Total docs rejected
function hoppr_total_docs_rejected($salesperson_uid) {
  $sql_total_docs_rej = "SELECT count(nn.nid) as total_docs_rej FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where nn.uid= '" . $salesperson_uid . "' and ctmd.field_hop_ops_agr_sta_value='Rejected'  ";
  $rs_total_docs_rej_obj = db_fetch_array(db_query($sql_total_docs_rej));
  $rs_total_docs_rej = $rs_total_docs_rej_obj['total_docs_rej'];
  return $rs_total_docs_rej;
}
//Total docs not recieved
function hoppr_total_docs_not_recieved($salesperson_uid) {
  $sql_total_docs_notrecved = "SELECT count(nn.nid) as total_docs_notrecved FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid where nn.uid= '" . $salesperson_uid . "' and ctmd.field_hop_ops_agr_sta_value='Not Received'  ";
  $rs_total_docs_notrecved_obj = db_fetch_array(db_query($sql_total_docs_notrecved));
  $rs_total_docs_notrecved = $rs_total_docs_notrecved_obj['total_docs_notrecved'];
  return $rs_total_docs_notrecved;
}

//General function
function get_offers_query() {
  $sql_count_offer = "SELECT count(nn.nid) as total_mer_offer FROM {node} nn inner join {node_revisions} nr on nn.vid=nr.vid  inner join {content_type_offer_detail} ctmd  ON ctmd.vid = nr.vid  ";
  return $sql_count_offer;
}
function get_rm_cnt_filteration() {
	global $user;
  $u_arr = get_all_salesman_of_rm($user->uid);
  $new_array = array();
  foreach($u_arr as $result_num => $sub_array) {
   $new_array[$result_num] = $sub_array['uid'];
  }
  $users_uid = implode(",", $new_array);
  $all_sm_of_smngr = get_all_salesman_of_all_salesmanager($user->uid);
  if(!empty($all_sm_of_smngr)){
    $sql_count_offer .= " and (nn.uid in (".$users_uid.") OR nn.uid in (".$all_sm_of_smngr.") OR nn.uid='".$user->uid."') ";
  }else {
      $sql_count_offer .= " and (nn.uid in (".$users_uid.") OR  nn.uid='".$user->uid."') ";
    }
      return $sql_count_offer;
}
function get_sm_cnt_filteration() {
  global $user;
  $u_arr = get_all_salesman_of_rm($user->uid);
  $new_array = array();
  foreach($u_arr as $result_num => $sub_array) {
      $new_array[$result_num] = $sub_array['uid'];
  }
  $users_uid = implode(",", $new_array);
  $sql_count_offer .= " and (nn.uid in (".$users_uid.") OR  nn.uid='".$user->uid."') ";
}

// RM Dashboard
//RM Dashboard----Total offers by all salesperson and salesmanager and themselves(RM)
function get_all_offers_by_theie_sp_or_sm($rm_id) {
	$sql_count_offer = get_offers_query();
  $sql_count_offer .= get_rm_cnt_filteration();
  return $sql_count_offer;
}
//RM Dashboard----total Approved,rejected,onhold offers by rm
function get_all_app_rej_onhld_offers_by_rm($rm_sts) {
  $sql_count_offer = get_offers_query();
  $sql_count_offer = " ctmd.field_hoppr_new_rmsmsts_value= '".$rm_sts."' ";
  $sql_count_offer .= get_rm_cnt_filteration();
  return $sql_count_offer;
}
//RM Dashboard----total Approved,rejected offers by ops head exe(tarun)
function get_all_app_rej_offers_by_opsheadexe_for_rm($off_sts) {
  $sql_count_offer = get_offers_query();
  $sql_count_offer = " ctmd.field_hop_ops_oh_ds_sts_value= '".$off_sts."' ";
  $sql_count_offer .= get_rm_cnt_filteration();
  return $sql_count_offer;
}
//RM Dashboard----total Approved,rejected,onhold,followup offers by ops exe
function get_all_app_rej_onhld_flwup_offers_by_opsheadexe_for_rm($ops_exe_sts) {
  $sql_count_offer = get_offers_query();
  $sql_count_offer = " ctmd.field_hop_offer_ops_status_value= '".$ops_exe_sts."' ";
  $sql_count_offer .= get_rm_cnt_filteration();
  return $sql_count_offer;
}
//RM Dashboard----Total docs uploaded by salesperson,salesmanager and themselves-----it varies from total number of offers as some offer have no any agreement uploaded by salesperson at the time of offer uploaded.....the agreement uploaded by concern person is uploaded on later time.
function get_all_offer_rec_by_docs_for_rm() {
  $sql_count_offer = db_query("select count(distinct ct.vid) as app_ofrs from {content_field_docs_upload} ct inner join {node} nn on nn.vid=ct.vid where ct.field_docs_upload_fid!='NULL' group by ct.nid ");
  $sql_count_offer .= get_rm_cnt_filteration();
  $docs_arr = array();
  while($rsdocs = db_fetch_array($sql_count_offer)) {
    $docs_arr[] = $rsdocs;
  }
  $tot_docs = count($docs_arr);
  return $tot_docs;
}
//RM Dashboard----Total agreement approved,rejected and not received by Docs team
function get_all_offer_app_rej_not_rcved_by_docs_for_rm($opsmngr_sts) {
  $sql_count_offer = get_offers_query();
  $sql_count_offer = " ctmd.field_hop_ops_agr_sta_value= '".$opsmngr_sts."' ";
  $sql_count_offer .= get_rm_cnt_filteration();
  return $sql_count_offer;
}
//**********************    SM Dashboard  **********************//
//SM Dashboard----SM  Total offers by all salesperson and themselves(SM)
function get_all_offers_by_salesperson() {
  $sql_count_offer = get_offers_query();
  $sql_count_offer .= get_sm_cnt_filteration();
  return $sql_count_offer;
}
//SM Dashboard----total Approved,rejected,onhold offers by SM
function get_all_app_rej_onhld_offers_by_sm($off_sts_bysm) {
  $sql_count_offer = get_offers_query();
  $sql_count_offer = " ctmd.field_hoppr_new_rmsmsts_value= '".$off_sts_bysm."' ";
  $sql_count_offer .= get_sm_cnt_filteration();
  return $sql_count_offer;
}
//SM Dashboard----total Approved,rejected offers by ops head exe(tarun)
function get_all_app_rej_offers_by_opsheadexe_for_sm($off_sts_byopsheadexe) {
  $sql_count_offer = get_offers_query();
  $sql_count_offer = " ctmd.field_hop_ops_oh_ds_sts_value= '".$off_sts_byopsheadexe."' ";
  $sql_count_offer .= get_sm_cnt_filteration();
  return $sql_count_offer;
}
//SM Dashboard----total Approved,rejected,onhold,followup offers by ops exe
function get_all_app_rej_onhld_flwup_offers_by_ops_exe($off_sts_by_opsexe) {
  $sql_count_offer = get_offers_query();
  $sql_count_offer = " ctmd.field_hop_offer_ops_status_value= '".$off_sts_by_opsexe."' ";
  $sql_count_offer .= get_sm_cnt_filteration();
  return $sql_count_offer;
}
//SM Dashboard----
function get_all_offer_rec_by_docs_for_sm() {
  $sql_count_offer = db_query("select count(distinct ct.vid) as app_ofrs from {content_field_docs_upload} ct inner join {node} nn on nn.vid=ct.vid where ct.field_docs_upload_fid!='NULL' group by ct.nid ");
  $sql_count_offer .= get_sm_cnt_filteration();
  $docs_arr = array();
  while($rsdocs = db_fetch_array($sql_count_offer)) {
    $docs_arr[] = $rsdocs;
  }
  $tot_docs = count($docs_arr);
  return $tot_docs;
}
//SM Dashboard----
function get_all_offer_app_rej_nt_rcved_by_docs_for_sm($opsmngr_sts) {
  $sql_count_offer = get_offers_query();
  $sql_count_offer = " ctmd.field_hop_ops_agr_sta_value= '".$opsmngr_sts."' ";
  $sql_count_offer .= get_sm_cnt_filteration();
  return $sql_count_offer;
}
function salesperson_rm_all_heirarchy() {
	global $user;
$all_user = db_query("select distinct rm_id from {users} where rm_id not in(0,1,66,'".$user->uid."') ");
      $u_arr = array();
      while($rs = db_fetch_array($all_user)){
        $u_arr[] = $rs;
      }
      foreach($u_arr as $result_num => $sub_array) {
        $new_array[$result_num] = $sub_array['rm_id'];
      }
      $users_uid = implode(",", $new_array);

      $rs_rid  = get_user_role_id($user->uid);
      if($rs_rid == 'y2cfmanager') {
        $sql_rsCategories .= "SELECT * FROM {users} WHERE uid !=0 ";
      }
      if($user->uid == '1') {
        $sql_rsCategories .= "SELECT * FROM {users} WHERE uid !=0 ";
      }

      if($rs_rid == 'reporting manager' || $rs_rid == 'salesmanager') {
        $u_arr = get_all_salesman_of_rm($user->uid);
        $new_array = array();
        foreach($u_arr as $result_num => $sub_array) {
          $new_array[$result_num] = $sub_array['uid'];
        }
        $users_uid = implode(",", $new_array);
        $all_sm_of_smngr = get_all_salesman_of_all_salesmanager($user->uid);
        if(!empty($all_sm_of_smngr)){
          $sql_rsCategories .= " SELECT * FROM {users} WHERE (uid in (".$users_uid.") OR uid in (".$all_sm_of_smngr.") OR uid='".$user->uid."') ";
        }else
        {
          $sql_rsCategories .= " SELECT * FROM {users} WHERE  (uid in (".$users_uid.") OR  uid='".$user->uid."') ";
        }
      }
      $sql_rsCategories .= "ORDER BY uid";
      $rsCategories = db_query($sql_rsCategories);
      $arrayCategories = array();

      while($row = db_fetch_array($rsCategories)){
        $arrayCategories[$row['uid']] = array("parent_id" => $row['rm_id'], "name" => $row['name']);
      }
      return $arrayCategories;
}
function createMerchantOfferTree_for_dashboard($array, $currentParent, $currLevel = 0, $prevLevel = -1) {
    global $base_url;
    foreach ($array as $categoryId => $category) {
      if ($currentParent == $category['parent_id']) {
        if ($currLevel > $prevLevel) echo " <ul> ";
        if ($currLevel == $prevLevel) echo " </li> ";
        $folder_id = arg(2);
        $add_to_con_url = $base_url.'/y2cf/offerhierarchy/'.$categoryId;
        if($categoryId == $folder_id) {
          $color = 'style="color:#13b00a;font-weight:bold;"';
        }else{
          $color = 'style="color:#157DEC;"';
        }

        echo '<li ><span>'.ucwords($category['name']).'</span></span>';
        if ($currLevel > $prevLevel) { $prevLevel = $currLevel; }
        $currLevel++;
        createMerchantOfferTree_for_dashboard ($array, $categoryId, $currLevel, $prevLevel);
        $currLevel--;
      }
    }
    if ($currLevel == $prevLevel) echo " </li>  </ul> ";
  }
//----------DASHBOARD REPORTS---------//
function hoppr_dashboard_cron() {
  //RM report
  $rm_accepted = hoppr_ops_total_offer_approved_by_rm_or_sm('Accepted');
  $rm_rejected = hoppr_ops_total_offer_approved_by_rm_or_sm('Rejected');
  $rm_onhold = hoppr_ops_total_offer_approved_by_rm_or_sm('On Hold');
  $total_rms = $rm_accepted + $rm_rejected + $rm_onhold;
  $rm_pending = $total_offers - $total_rms;
  $overall_rm_pending = $total_outlets - $rm_accepted;
  $rm_pending_percent = ceil(($overall_rm_pending*100)/$total_outlets);
  $rm_rejection_percent = ceil(($rm_rejected*100)/$total_outlets);
//OPS Head REPORT
  $opsh_accepted = hoppr_ops_total_offer_approved_by_opshead_exe('Accepted');
  $opsh_rejected = hoppr_ops_total_offer_approved_by_opshead_exe('Rejected');
  $opsh_onhold = hoppr_ops_total_offer_approved_by_opshead_exe('On Hold');
  $opsh_onhldbyrm = hoppr_ops_total_offer_approved_by_opshead_exe('On Hold by RM');
  $opsh_onholdbynsh = hoppr_ops_total_offer_approved_by_opshead_exe('On Hold by NSH');
  $opsh_rejbyproops = hoppr_ops_total_offer_approved_by_opshead_exe('Rejected by Product OPS');
  $total_byopsh = $opsh_accepted + $opsh_rejected + $opsh_onhold;
  $opsh_pending = $total_outlets - $total_byopsh;
  $exe_opsh_pending = $total_outlets - ($opsh_accepted + $opsh_rejected);
  $oh_pending_percent = ceil(($exe_opsh_pending*100)/$total_outlets);
  $oh_rejection_percent = ceil(($opsh_rejected*100)/$total_outlets);
//OE + TC Status
  $oe_tc_approved = hoppr_ops_total_offer_approved_by_oe('Approved');
  $oe_tc_followup = hoppr_ops_total_offer_approved_by_oe('Follow up');
  $oe_tc_onhold = hoppr_ops_total_offer_approved_by_oe('On Hold');
  $rejected = hoppr_ops_total_offer_approved_by_oe('Rejected');
  $oe_tc_rej_by_merchant = hoppr_ops_total_offer_approved_by_oe('Rejected: Cancelled by merchant');
  $rej_out_closed = hoppr_ops_total_offer_approved_by_oe('Rejected: Outlet Closed');
  $rej_und_renovation = hoppr_ops_total_offer_approved_by_oe('Rejected: Outlet under renovation');
  $rej_mngt_chnged = hoppr_ops_total_offer_approved_by_oe('Rejected: Management changed');
  $rej_qulity_issue = hoppr_ops_total_offer_approved_by_oe('Rejected: Quality Issue');
  $sales_team_meeting_request = hoppr_ops_total_offer_diff_status_by_tc('Sales team meeting request');
  $data_derscrip = hoppr_ops_total_offer_diff_status_by_tc('Data Discrepancy');
  $rej_by_tc = hoppr_ops_total_offer_diff_status_by_tc('Rejected by Tele-Agent');
  $lang_issue = hoppr_ops_total_offer_diff_status_by_tc('Language Issue');
  $others = hoppr_ops_total_offer_approved_by_oe('Others');
  
  $total_active_by_oetc = $oe_tc_approved + $oe_tc_followup + $oe_tc_onhold + $rejected + $sales_team_meeting_request + $data_derscrip + $lang_issue + $others;
  $pending_byoetc = $total_byopsh - $total_active_by_oetc;
  $total_rej_by_oe_tc = $rejected + $oe_tc_rej_by_merchant + $rej_out_closed + $rej_und_renovation + $rej_mngt_chnged + $rej_qulity_issue + $sales_team_meeting_request + $data_derscrip;
  $opstc_overall_pending = $opsh_accepted - ($total_rej_by_oe_tc + $oe_tc_approved);
  $oe_tc_pending_percent = ceil(($opstc_overall_pending*100)/$opsh_accepted);
  $oe_tc_rejection_percent = ceil(($total_rej_by_oe_tc*100)/$opsh_accepted);
//Documentation
  $total_docs_received = hoppr_ops_total_offer_agreement_recived_by_ops_mngr();
  $tol_pending_docs_to_be_received = $total_offers - $total_docs_received;
  $docs_approved = hoppr_ops_total_offer_agreement_approved_by_ops_mngr('Approved');
  $docs_rejected = hoppr_ops_total_offer_agreement_approved_by_ops_mngr('Rejected');
  $docs_not_recieved = hoppr_ops_total_offer_agreement_approved_by_ops_mngr('Not Received');
  $docs_onhold = hoppr_ops_total_offer_agreement_approved_by_ops_mngr('On Hold');
  $docs_notrequired = hoppr_ops_total_offer_agreement_approved_by_ops_mngr('Not Required');
  $total_active_docs = $docs_approved + $docs_rejected + $docs_not_recieved + $docs_onhold + $docs_notrequired;
  $pending_docs = $total_offers - $total_active_docs;
  $overall_pending_docs = $oe_tc_approved - ($docs_approved + $docs_rejected);
  $docs_pending_percent = ceil(($overall_pending_docs*100)/$oe_tc_approved);
  $docs_rejection_percent = ceil(($docs_rejected*100)/$oe_tc_approved);
//Evaluation status
    $eval_approved = hoppr_ops_total_evaluation_status_by_products('Approved');
    $eval_rejected = hoppr_ops_total_evaluation_status_by_products('Rejected');
    $total_active_eval = $eval_approved - $eval_rejected;
    $pending_by_eval = $total_outlets - ($total_active_eval + $eval_rejected);
    $overall_pending_by_eval = $docs_approved - $eval_approved;
    $eval_pending_percent = ceil(($overall_pending_by_eval*100)/$docs_approved);
//offer Upload status
    $upload_complete = hoppr_ops_total_offerupload_status('Complete');
    $upload_onhold = hoppr_ops_total_offerupload_status('On Hold');
    $total_active_upload_offers = $upload_complete + $upload_onhold;
    $pending_upload_offers = $eval_approved - $upload_complete;
    $overall_pending_upload_offers = $eval_approved - $upload_complete;
    $ofrupld_pending_percent = ceil(($overall_pending_upload_offers*100)/$eval_approved);
//Offers Testing status
    $testing_complete = hoppr_ops_total_offertesting_status('Complete');
    $testing_onhold = hoppr_ops_total_offertesting_status('On Hold');
    $total_active_testing_offers = $testing_complete + $testing_onhold;
    $pending_testing_offers =  $upload_complete - $testing_complete;
    //$ofrupld_pending_percent = ceil(($pending_testing_offers*100)/$upload_complete);
//Creative design
    $cr_yes = hoppr_ops_total_creativedesign('Yes');
    $cr_no = hoppr_ops_total_creativedesign('No');
    $total_cr_active = $cr_yes + $cr_no;
    //Total evaluation - total creative done
    $pending_cr = $eval_approved - $total_cr_active;
    $overall_pending_cr = $upload_complete - $cr_yes;
    $cr_pending_percent = ceil(($overall_pending_cr*100)/$upload_complete);
//POS STATUS
    $pos_delivered = hoppr_ops_total_pos_status('Delivered');
    $pos_not_applicable = hoppr_ops_total_pos_status('Not Applicable');
    $pos_not_delivered = hoppr_ops_total_pos_status('Not Delivered');
    $total_active_pos = $pos_delivered + $pos_not_delivered;
    //Total creative done - total pos delivered
    $pending_pos = $cr_yes - $total_active_pos;
    $overall_pending_pos = $cr_yes - $pos_delivered;
    $pos_pending_percent = ceil(($overall_pending_pos*100)/$cr_yes);
//GO LIVE
    $gl_done = hoppr_ops_total_golive_status('Done');
    $gl_not_done = hoppr_ops_total_golive_status('Not Done');
    $total_active_gl = $gl_done + $gl_not_done;
    $pending_gl = $pos_delivered - $total_active_gl;
    $overall_pending_gl = $pos_delivered - $gl_done;
    $gl_pending_percent = ceil(($overall_pending_gl*100)/$pos_delivered);
//Mail Communication sts
    $mail_comm = hoppr_ops_mail_communication_to_merchants('1');
    $overall_pending_mail_comm = $gl_done - $mail_comm;
    $mail_comm_pending_percent = ceil(($overall_pending_mail_comm*100)/$gl_done);


    
    $header_msg = 'SIGNUP TO GO LIVE- 01 Jun 2012 to '.date('d M Y');;
	$hoppr_complete_report= '<table width="100%" border="1px" cellspacing="0" style="border-collapse:collapse">
  <tr>
    <th colspan="11" bgcolor="#FDE9D9" scope="col">'.$header_msg.'</th>
  </tr>
  <tr bgcolor="#FDE9D9">
    <th scope="row">&nbsp;</th>
    <td align="center"><strong>Sales</strong></td>
    <td align="center"><strong>1st Filter</strong></td>
    <td align="center"><strong>2nd filter</strong></td>
    <td align="center"><strong>Docs</strong></td>
    <td align="center"><strong>Keyword</strong></td>
    <td align="center"><strong>Upload</strong></td>
    <td align="center"><strong>Creative</strong></td>
    <td align="center"><strong>POS Delivery</strong></td>
    <td align="center"><strong>Go Live</strong></td>
    <td align="center"><strong>Merchant Mailer</strong></td>
  </tr>
  <tr bgcolor="#FDE9D9">
    <th align="left" scope="row"><strong>Owner</strong></th>
    <td align="center"><strong>Rupesh</strong></td>
    <td align="center"><strong>Tarun</strong></td>
    <td align="center"><strong>Tarun</strong></td>
    <td align="center"><strong>Vibhuti</strong></td>
    <td align="center"><strong>Prayrak</strong></td>
    <td align="center"><strong>Saket</strong></td>
    <td align="center"><strong>Shefali</strong></td>
    <td align="center"><strong>Abu</strong></td>
    <td align="center"><strong>Tarun</strong></td>
    <td align="center"><strong>Vibhuti</strong></td>
  </tr>
  <tr>
    <th align="left" scope="row">Accepted/Actioned</th>
    <td align="center">'.l($rm_accepted,$base_url.'/y2cf/merchantsoperation/?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=acc&drs=&oes=&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center">'.l($opsh_accepted,$base_url.'/y2cf/merchantsoperation/?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=acc&oes=&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center">'.l($oe_tc_approved, $base_url.'/y2cf/merchantsoperation/?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=&oes=app&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center">'.l($docs_approved, $base_url.'/y2cf/merchantsoperation/?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=&oes=&proops=&goliveops=&omdrcv=&oms=app&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center">'.l($eval_approved, $base_url.'/y2cf/merchantsoperation/?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=&oes=&proops=app&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center">'.l($upload_complete, $base_url.'/y2cf/merchantsoperation?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=&oes=&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=com&Search_val=Filter').'</td>
    <td align="center">'.l($cr_yes, $base_url.'/y2cf/merchantsoperation?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=&oes=&proops=&goliveops=&omdrcv=&oms=&pros=&gls=yes&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center">'.l($pos_delivered, $base_url.'/y2cf/merchantsoperation?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=&oes=&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=delivered&ofrupld=&Search_val=Filter').'</td>
    <td align="center">'.l($gl_done, $base_url.'/y2cf/merchantsoperation?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=&oes=&proops=&goliveops=done&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center">'.$mail_comm.'</td>
  </tr>
  <tr>
    <th align="left" scope="row">Rejected</th>
    <td align="center">'.l($rm_rejected, $base_url.'/y2cf/merchantsoperation/?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=rej&drs=&oes=&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center" bgcolor="#FF0000">'.l($opsh_rejected, $base_url.'/y2cf/merchantsoperation/?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=rej&oes=&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center" bgcolor="#FF0000">'.l($total_rej_by_oe_tc, $base_url.'/y2cf/merchantsoperation/?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=&oes=rej&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center" bgcolor="#FF0000">'.l($docs_rejected, $base_url.'/y2cf/merchantsoperation/?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=&oes=&proops=&goliveops=&omdrcv=&oms=rej&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
  </tr>
  <tr>
    <th align="left" scope="row">*Rejection %</th>
    <td align="center">'.$rm_rejection_percent.'%</td>
    <td align="center">'.$oh_rejection_percent.'%</td>
    <td align="center">'.$oe_tc_rejection_percent.'%</td>
    <td align="center">'.$docs_rejection_percent.'%</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
    <td align="center">&nbsp;</td>
  </tr>
  <tr>
    <th align="left" scope="row">Pending</th>
    <td align="center" bgcolor="#7AC47C">'.l($overall_rm_pending, $base_url.'/y2cf/merchantsoperation?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=pending&drs=&oes=&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center" bgcolor="#63BE7B">'.l($exe_opsh_pending, $base_url.'/y2cf/merchantsoperation?salesperson=&city=&merchant=&entry_date=&exit_date=&rm_or_sm_status=&drs=pending&oes=&proops=&goliveops=&omdrcv=&oms=&pros=&gls=&pos=&ofrupld=&Search_val=Filter').'</td>
    <td align="center" bgcolor="#FDC57D">'.$opstc_overall_pending.'</td>
    <td align="center" bgcolor="#F8696B">'.$overall_pending_docs.'</td>
    <td align="center" bgcolor="#E5E382">'.$overall_pending_by_eval.'</td>
    <td align="center" bgcolor="#F8696B">'.$overall_pending_upload_offers.'</td>
    <td align="center" bgcolor="#FA8070">'.$overall_pending_cr.'</td>
    <td align="center" bgcolor="#C6DA80">'.$overall_pending_pos.'</td>
    <td align="center" bgcolor="#FFE283">'.$overall_pending_gl.'</td>
    <td align="center" bgcolor="#F8696B">'.$overall_pending_mail_comm.'</td>
  </tr>
  <tr>
    <th align="left" scope="row">Pending%</th>
    <td align="center">'.$rm_pending_percent.'%</td>
    <td align="center">'.$oh_pending_percent.'%</td>
    <td align="center">'.$oe_tc_pending_percent.'%</td>
    <td align="center">'.$docs_pending_percent.'%</td>
    <td align="center">'.$eval_pending_percent.'%</td>
    <td align="center">'.$ofrupld_pending_percent.'%</td>
    <td align="center">'.$cr_pending_percent.'%</td>
    <td align="center">'.$pos_pending_percent.'%</td>
    <td align="center">'.$gl_pending_percent.'%</td>
    <td align="center">'.$mail_comm_pending_percent.'%</td>
  </tr>
  <tr>
    <th align="left" scope="row">Total</th>
    <td align="center">'.$total_outlets.'</td>
    <td align="center">'.$total_outlets.'</td>
    <td align="center">'.$opsh_accepted.'</td>
    <td align="center">'.$oe_tc_approved.'</td>
    <td align="center">'.$docs_approved.'</td>
    <td align="center">'.$eval_approved.'</td>
    <td align="center">'.$upload_complete.'</td>
    <td align="center">'.$cr_yes.'</td>
    <td align="center">'.$pos_delivered.'</td>
    <td align="center">'.$gl_done.'</td>
  </tr>
  <tr>
    <th align="left" scope="row">Desired Processing Time</th>
    <td align="center">&nbsp;</td>
    <td align="center">1</td>
    <td align="center">2</td>
    <td align="center">2</td>
    <td align="center">1</td>
    <td align="center">1</td>
    <td align="center">1</td>
    <td align="center">3</td>
    <td align="center">2</td>
    <td align="center">2</td>
  </tr>
  <tr>
    <th align="left" bgcolor="#974706" scope="row">Average Pending days</th>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
    <td align="center" bgcolor="#FFC7CE">&nbsp;</td>
  </tr>
  <tr>
    <th colspan="11" scope="row">*Rejection %(Sum total of rejections coming from 1st and 2nd Filter &amp; Documentation)/Total sales</th>
  </tr>
</table>';
    

//Mail sending process
 $sender = 'partners@hoppr.com';
  $subject = "sales operations dashboard";
  $body_general_mail = $hoppr_complete_report;
  $plaintext = FALSE;
  $headers = array();
  $recipient_testing = 'pizharashraf@gmail.com';
  /*
  $recipient_manju = 'manju@hoppr.com';
  $recipient_priya = 'priya@hoppr.com';
  $recipient_taun = 'tarun@hoppr.com';
  $recipient_kabeer = 'kabeer@hoppr.com';
  $recipient_imti = 'imti@hoppr.com';
  $recipient_rupesh = 'rupesh@hoppr.com';
  */
  //mail to manju,priya,tarun,vibhuti,prayrak,saket,saba,kabir,imtiyaz,
//    mimemail($sender, $recipient_testing, $subject, $body_general_mail, $plaintext = NULL, $headers=array(), $text = NULL, $attachments = array(), $mailkey = '');
}

//Special reports
/*
total new merchants
total existing merchants
total merchants in different cities....as city ID is (1,2,3,4,5,6,7,8)
City Name       ------   Total merchants
kolkata         ----- 12
Delhi/NCr       --- 23

Offer validity------- Total merchants
30 days
60 days
90 days
180 days
1 yrs
Merchant Category-----Total merchants
A()----
B()---
C()----
D()----
Offer type-----------Total merchants
single person offer
double person offer
triple person offer
multiple person offer

total outlet type having, own, franchiese, others
total state wise offer count
*/


  class utility{
  public static function getMaxOfArray($ArrayToCheck){
    $maxValue = 0;

    foreach($ArrayToCheck as $temp){
      if(is_array($temp)){
        $maxValue = max($maxValue, utility::getMaxOfArray($temp));
      }
      else{
        $maxValue = max($maxValue, $temp);
      }
    }
    return $maxValue;
  }
}

/**
 * @brief Main class
 *
 * This is the mainframe of the wrapper
 *
 * @version 0.5.2
 */
class gChart{
  /**
   * @brief This variable holds all the chart information.
   * @var array
   */
  private $chart;

  /**
   * @brief API server URL
   * @var string
   * @usedby getUrl()
   */
  private $baseUrl = "chart.apis.google.com/chart?";

  /**
   * @brief Data set values.
   * Every array entry is a data set.
   * @var array
   */
  protected $values = Array();

  /**
   * @brief Widht of the chart
   * @var Integer
   */
  private $width;
  private function setWidth($width) {
    $this->width = $width;
  }
  public function getWidth() {
    return($this->width);
  }

  /**
   * @brief Height of the chart
   * @var Integer
   */
  private $height;
  private function setHeight($height) {
    $this->height = $height;
  }
  public function getHeight() {
    return($this->height);
  }

  /**
   * @brief Data precision
   * Defines the precision of the rounding in textEncodeData(). By default it is 2.
   */
  private $precision = 2;
  public function setPrecision($precision) {
    $this->precision = $precision;
  }
  public function getPrecision() {
    return $this->precision;
  }

  /**
   * @brief Handles the number of items in the dataset.
   */
  private $dataCount;
  public function setDataCount($dataCount){
    if (!isset($this->dataCount))
      $this->dataCount = $dataCount;
  }
  public function getDataCount(){
    return $this->dataCount;
  }

  /**
   * @brief Data encoding char
   * @var char
   */
  private $dataEncodingType = 't';
  public function setEncodingType($newEncodeType) {
    $this->dataEncodingType = $newEncodeType;
  }
  public function getEncodingType() {
    return ($this->dataEncodingType);
  }
  protected function encodeData($data, $separator, $encodigData = ''){
    if ($encodigData == 's') {
      $data = $this->simpleEncodeData($data);
      $separator = '';
    } else if ($encodigData == 'e') {
      $data = $this->extendedEncodeData($data);
      $separator = '';
    } else if ($encodigData == 't') {
      $data = $this->textEncodeData($data);
    }
    $retStr = $this->separateData($data, $separator, "|");
    $retStr = trim($retStr, "|");
    return $retStr;
  }
  protected function separateData($data, $separator, $datasetSeparator){
    $retStr = "";
    if(!is_array($data))
      return $data;
    foreach($data as $currValue){
      if(is_array($currValue))
        $retStr .= $this->separateData($currValue, $separator, $datasetSeparator);
      else
        $retStr .= $currValue.$separator;
    }
    $retStr = trim($retStr, $separator);
    $retStr .= $datasetSeparator;
    return $retStr;
  }

  /**
   * @brief Adds a data set
   *
   * @param $data Array Data Set values
   */
  public function addDataSet($data){
    array_push($this->values, $data);
  }
  /**
   * @brief Adds a hidden data set.
   *
   * Use this function, used with addValueMarkers(), to build compound charts
   *
   * @param $hiddenData Array Data Set values
   */
  public function addHiddenDataSet($hiddenData){
    $this->setDataCount(count($this->values));
    array_push($this->values, $hiddenData);
  }

  public function clearDataSets(){
    $this->values = Array();
  }
  /**
   * @brief Encodes the data as Basic Text and Text Format with Custom Scaling.
   *
   * This specifies floating point values from 0-100, inclusive, as numbers. If user sets data range,
   * with setDataRange(), the function will do nothig and Google API will render the inage in those
   * boundaries.
   *
   * @return Array The encoded data array, rounded to the decimal point defined by setPrecision(). By default it is 2.
   */
  private function textEncodeData($data) {
    if (isset($this->chart['chds'])) {
      return $data;
    }
    $encodedData = array();
    $max = utility::getMaxOfArray($data);
    if ($max > 100) {
      $rate = $max / 100;
      foreach ($data as $array) {
        if (is_array($array)) {
          $encodedData2 = array();
          foreach ($array as $elem) {
            array_push($encodedData2, round($elem / $rate, $this->getPrecision()));
          }
          array_push($encodedData, $encodedData2);
        } else {
          array_push($encodedData, round($array / $rate, $this->getPrecision()));
        }
      }
    } else {
      $encodedData = $data;
    }
    return $encodedData;
  }
  /**
   * @brief Encodes the data as Simple Text.
   * This specifies integer values from 0-61, inclusive, encoded by a single alphanumeric character.
   * This results in the shortest data string URL of all the data formats.
   *
   * @todo Add support for missing values
   */
  private function simpleEncodeData($data){
    $encode_string='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    $max = utility::getMaxOfArray($data);
    $encodedData = array();
    if ($max > 61){
      $rate = $max / 61.0;
      foreach($data as $array) {
        if (is_array($array)) {
          $encodedData2 = array();
          foreach ($array as $elem){
            $index = (int)$elem/$rate;
            array_push($encodedData2, $encode_string[$index]);
          }
          array_push($encodedData, $encodedData2);
        } else {
          $index = (int)$array/$rate;
          array_push($encodedData, $encode_string[$index]);
        }
      }
    } else {
      foreach($data as $array) {
        if (is_array($array)) {
          $encodedData2 = array();
          foreach ($array as $elem){
            array_push($encodedData2, $encode_string[$elem]);
          }
          array_push($encodedData, $encodedData2);
        } else {
          array_push($encodedData, $encode_string[$array]);
        }
      }
    }
    return $encodedData;
  }
  /**
   * @brief Encodes the data as Extended Text.
   *
   * This specifies integer values from 0-4095, inclusive, encoded by two alphanumeric characters.
   *
   * @todo Add support for missing values
   */
  private function extendedEncodeData($data){
    $encode_string='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-.';
    $max = utility::getMaxOfArray($data);
    $encodedData = array();
    if ($max > 4095){
      $rate = $max/4095.0;
      foreach ($data as $array)
        if (is_array($array)) {
          $encodedData2 = array();
          foreach ($array as $elem){
            $toEncode=(int)$elem/$rate;
            $s='';
            for ($i=0;$i<2;++$i){
              $m = $toEncode%64;
              $toEncode/=64;
              $s = $encode_string[$m].$s;
            }
            array_push($encodedData2, $s);
          }
          array_push($encodedData, $encodedData2);
        } else {
          $toEncode=(int)$array/$rate;
          $s='';
          for ($i=0;$i<2;++$i){
            $m = $toEncode%64;
            $toEncode/=64;
            $s = $encode_string[$m].$s;
          }
          array_push($encodedData, $s);
        }
    } else {
      foreach ($data as $array)
        if (is_array($array)) {
          foreach ($array as $elem){
            $s='';
            $toEncode = $elem;
            for ($i=0; $i<2; ++$i){
              $m = $toEncode%64;
              $toEncode /= 64;
              $s = $encode_string[$m].$s;
            }
            array_push($encodedData2, $s);
          }
          array_push($encodedData, $encodedData2);
        } else {
          $s='';
          $toEncode = $array;
          for ($i=0; $i<2; ++$i){
            $m = $toEncode%64;
            $toEncode /= 64;
            $s = $encode_string[$m].$s;
          }
          array_push($encodedData, $s);
        }
    }
    return $encodedData;
  }

  /**
   * @brief Returns the applicable labels, based on the number of data sets of the chart.
   */
  public function getApplicableLabels($labels){
    return array_splice($labels, 0, count($this->values));
  }

  /**
   * @brief Server number processing the chart
   * @var Integer
   */
  private $serverNum;
  /**
   * @brief Sets server number processing the chart.
   * @param $newServerNum Integer The server number. The function will scale this number to the range 0-9
   */
  public function setServerNumber($newServerNum){
    $this->serverNum = $newServerNum % 10;
  }
  /**
   * @brief Returns the server number processing the chart
   * @return Integer
   */
  public function getServerNumber(){
    return ($this->serverNum);
  }

  /**
   * @brief Sets the chart property
   * @param $key String Name of the chart parameter
   * @param $value String Value of the chart parameter
   */
  public function setProperty($key, $value, $append = false, $dataSetSeparator = '|') {
    if ($append && isset($this->chart[$key])) {
      $this -> chart[$key] = $this -> chart[$key].$dataSetSeparator.$value;
    } else {
      $this -> chart[$key] = $value;
    }
  }
  /**
   * @brief Gets a chart property
   * @param $key String Name of the chart parameter
   */
  public function getProperty($key) {
    if (isset($this->chart[$key]))
      return ($this->chart[$key]);
  }
  /**
   * @brief Sets chart dimensions.
   *
   * Sets chart dimension using chs parameter. This checks of $width and $height are
   * defined because in gFormula 0s are used as default values to let the server
   * autosize the final png image. If only $hegiht is not 0, then the server will use
   * this value as the height of the png image and will autosize the width.
   *
   * @param $width Integer
   * @param $height Integer
   */
  public function setDimensions($width, $height) {
    $this -> setWidth($width);
    $this -> setHeight($height);
    if ($width && $height) {
      $this -> setProperty('chs', $width.'x'.$height);
    }
    else if ($height)
      $this -> setProperty('chs', $height);
  }
  /**
   * @brief Sets the colors for element of the chart.
   *
   * This is the basic function. The data in the array are interpreted as one color one data set.
   *
   * @param $colors Array Specifies colors using a 6-character string of hexadecimal values,
   *                      plus two optional transparency values, in the format RRGGBB[AA].
   */
  public function setColors($colors) {
    $this -> setProperty('chco', $this->encodeData($this->getApplicableLabels($colors),","));
  }
  /**
   * @brief Sets the labels for the legend
   *
   * @param $labels Array
   */
  public function setLegend($labels) {
    $this -> setProperty('chdl', urlencode($this->encodeData($this->getApplicableLabels($labels),"|")));
  }
  /**
   * @brief Sets the position and the order of the legend
   *
   * @param $position String Please refer to the documentation for the acceptable values
   * @param $order String Please refer to the documentation for the acceptable values
   */
  public function setLegendPosition($position, $order = null) {
    if (isset($order)) {
      $this -> setProperty('chdlp', $position.'|'.$order);
    } else {
      $this -> setProperty('chdlp', $position);
    }
  }
  /**
   * @brief Sets the title.
   *
   * You cannot specify where this appears.
   *
   * @param $title String Title to show for the chart. Use \r\n for a new line.
   */
  public function setTitle($title) {
    $title = str_replace("\r\n", "|", $title);
    $title = str_replace(" ", "+", $title);
    $this -> setProperty('chtt', $title);
  }
  /**
   *  @brief Sets font size and color of the title
   *
   * @param $color String The title color, in RRGGBB hexadecimal format. Default color is black.
   * @param $size Integer Font size of the title, in points.
   */
  public function setTitleOptions($color, $size) {
    $this -> setProperty('chts', $color.','.$size);
  }
  /**
   * @brief Specifies the size of the chart's margins, in pixels.
   *
   * You can specify the size of the chart's margins, in pixels. Margins are calculated inward from the
   * specified chart size (chs); increasing the margin size does not increase the total chart size, but
   * rather shrinks the chart area, if necessary.
   *
   * @param $chartMargins Array An array of four integers: <left_margin>, <right_margin>, <top_margin>, <bottom_margin>
   * @param $legendMargins Array An array of two integers: <legend_width>, <legend_height>. Optional
   */
  public function setChartMargins($chartMargins, $legendMargins = array()) {
    $this -> setProperty('chma', $this -> encodeData($chartMargins, ','));
    if (!empty($legendMargins))
      $this -> setProperty('chma', $this -> encodeData($legendMargins, ','), true);
  }
  /**
   * @brief Sets visible axes.
   *
   * @param $visibleAxes Array Visible axis labels. Please refer to the documentation for the acceptable values
   */
  public function setVisibleAxes($visibleAxes) {
    $this->setProperty('chxt', $this->encodeData($visibleAxes,','));
  }
  /**
   * @brief Specifies the range of values that appear on each axis independently.
   *
   * @param $axisIndex Integer This is a zero-based index into the axis array specified by setVisibleAxes
   * @param $startVal Integer A number, defining the low value for this axis.
   * @param $endVal Integer A number, defining the high value for this axis.
   * @param $stem Integer The count step between ticks on the axis. There is no default step value; the step
   *                      is calculated to try to show a set of nicely spaced labels.
   */
  public function addAxisRange($axisIndex, $startVal, $endVal, $step = null) {
    if (is_null($step))
      $axisRange = array($axisIndex, $startVal, $endVal);
    else
      $axisRange = array($axisIndex, $startVal, $endVal, $step);
    $this -> setProperty('chxr', $this->encodeData($axisRange, ',') , true);
  }
  /**
   * @brief Specifies the labels that appear on each axis independently.
   *
   * @param $axisIndex Integer This is a zero-based index into the axis array specified by setVisibleAxes
   * @param $axisLabel Array One or more labels to place along this axis.
   */
  public function addAxisLabel($axisIndex, $axisLabel) {
    $this->setProperty('chxl', $this->encodeData(array_merge(array($axisIndex.':'), $axisLabel), '|'), true);
  }
  /**
   * @brief Specifies the label positions on each axis independently.
   *
   * You can specify which axis labels to show, whether using the default labels or custom labels
   * specified using this function. If you do not specify exact positions using this parameter, labels
   * will be spaced evenly and at a default step value along the axes. If you do not call this function,
   * then the tick mark labels will be the default values (typically data values, or the bar numbers
   * in bar charts).
   *
   * @param $axisIndex Integer This is a zero-based index into the axis array specified by setVisibleAxes()
   * @param $labelPositions Array The position of the label along the axis. This is a comma-separated list of
   *                              numeric values, where each value sets the position of the corresponding label
   *                              in the addAxisLabel(): the first entry applies to the first label, and so on.
   *                              The position is a value in the range for that axis. Note that this will always
   *                              be 0100 unless you have specified a custom range using addAxisRange(). You
   *                              must have as many positions as you have labels for that axis.
   */
  public function addAxisLabelPositions($axisIndex, $labelPositions) {
    $this->setProperty('chxp', $axisIndex.','.$this->encodeData($labelPositions, ','), true);
  }
  /**
   * @brief Specifies the data range.
   *
   * Note that this does not change the axis range; to change the axis range, you must
   * use the setAxisRange function.
   *
   * @param $startVal Integer A number, definig the low value for the data set. Usually, it is the same as $startVal in addAxisRange
   * @param $endVal Integer A number, definig the high value for the data set. Usually, it is the same as $endVal in addAxisRange
   */
  public function setDataRange($startVal, $endVal) {
    $this->setProperty('chds', $startVal.','.$endVal);
  }
  /**
   * @brief Adds the background fill
   *
   * Specifies a solid fill for the background and/or chart area, or assign a transparency value to the whole chart.
   *
   * @param $fillType String The part of the chart being filled. Please refer to the documentation for the acceptable values
   * @param $color String The fill color, in RRGGBB hexadecimal format. For transparencies, the first six digits are ignored,
   *                      but must be included anyway.
   */
  public function addBackgroundFill($fillType, $color) {
    $this->setProperty('chf', $this->encodeData(array($fillType, 's', $color), ','), true);
  }
  /**
   * @brief Applies one or more gradient fills to chart areas or backgrounds.
   *
   * Each gradient fill specifies an angle, and then two or more colors anchored to a specified location. The color varies
   * as it moves from one anchor to another. You must have at least two colors with different <color_centerpoint>  values,
   * so that one can fade into the other. Each additional gradient is specified by a <color>,<color_centerpoint>  pair.
   *
   * @param $fillType String The part of the chart being filled. Please refer to the documentation for the acceptable values
   * @param $fillAngle Integer A number specifying the angle of the gradient from 0 (horizontal) to 90 (vertical).
   * @param $colors Array An array of couples <color> (The color of the fill, in RRGGBB hexadecimal format) and
   *                      <color_centerpoint> (Specifies the anchor point for the color. The color will start to fade from this
   *                      point as it approaches another anchor. The value range is from 0.0 (bottom or left edge) to 1.0 (top
   *                      or right edge), tilted at the angle specified by <angle>). Please define it in this way:
   *                      array(<color_1>,<color_centerpoint_1>,...,<color_n>,<color_centerpoint_n>).
   */
  public function setGradientFill($fillType, $fillAngle, $colors) {
    $this->setProperty('chf', $this->encodeData(array_merge(array($fillType, 'lg', $fillAngle), $colors), ','));
  }
  /**
   * @brief Specifies a striped background fill for your chart area, or the whole chart.
   *
   * @param $fillType String The part of the chart being filled. Please refer to the documentation for the acceptable values
   * @param $fillAngle Integer A number specifying the angle of the gradient from 0 (horizontal) to 90 (vertical).
   * @param $colors Array An array of couples <color> (The color of the fill, in RRGGBB hexadecimal format) and <width>
     *                      (The width of this stripe, from 0 to 1, where 1 is the full width of the chart. Stripes are repeated
     *                      until the chart is filled. Repeat <color> and <width> for each additional stripe. You must have at
     *                      least two stripes. Stripes alternate until the chart is filled).  Please define it in this way:
     *                      array(<color_1>,<width_1>,...,<color_n>,<width_n>).
   */
  public function setStripFill($fillType, $fillAngle, $colors) {
    $this->setProperty('chf', $this->encodeData(array_merge(array($fillType, 'ls', $fillAngle), $colors), ','));
  }
  /**
   * @brief Fills the area below a data line with a solid color.
   *
   * @param $where Char Whether to fill to the bottom of the chart, or just to the next lower line.
   *                    Must be B or b. Please refer to the documentation for the acceptable values
   * @param $color String An RRGGBB format hexadecimal number of the fill color
   * @param $startLineIndex Integer The index of the line at which the fill starts. The first data
   *                                series specified in addDataSet() has an index of zero (0), the
   *                                second data series has an index of 1, and so on.
   * @param $endLineIndex Integer Please refer to the documentation for the usage of this parameter.
   */
  public function addLineFill($where, $color, $startLineIndex, $endLineIndex) {
    $this->setProperty('chm', $this->encodeData(array($where, $color, $startLineIndex, $endLineIndex, 0),','), true);
  }
  /**
   * @brief Specifies solid or dotted grid lines on your chart
   *
   * @param $xAxisStepSize Ingeger Used to calculate how many x grid lines to show on the chart.
   *                               100 / step_size = how many grid lines on the chart.
   * @param $yAxisStepSize Integer Used to calculate how many x or y grid lines to show on the chart.
   *                               100 / step_size = how many grid lines on the chart.
   * @param $dashLength Integerthe Length of each line dash, in pixels. By default it is 4
   * @param $spaceLength Integer The spacing between dashes, in pixels. Specify 0 for for a solid line.
   *                             By default it is 1
   * @param $xOffset Integer The number of units, according to the chart scale, to offset the x grid line.
   * @param $yOffset Integer The number of units, according to the chart scale, to offset the y grid line.
   */
  public function setGridLines($xAxisStepSize, $yAxisStepSize, $dashLength = 4, $spaceLength = 1, $xOffset = 0, $yOffset = 0) {
    $this->setProperty('chg', $this->encodeData(array($xAxisStepSize, $yAxisStepSize, $dashLength, $spaceLength, $xOffset, $yOffset), ','));
  }
  /**
   * @brief Labels specific points on your chart with custom text, or with formatted versions of the data at that point.
   *
   * Please note that this function has an variable number of input variables. The order of the variable
   * must be the following:
   *  - marker_type: The type of marker to use. Please refer to the documentation for usage.
   *  - color: The color of the markers for this set, in RRGGBB hexadecimal format.
   *  - series_index: The zero-based index of the data series on which to draw the markers. The index is
   *    defined by the order of addDataSet()
   *  - which_points: [Optional] Which point(s) to draw markers on. Default is all markers. Use '' (blank
   *    string) for default.
   *  - size: The size of the marker in pixels.
   *  - z_order: [Optional] The layer on which to draw the marker, compared to other markers and all other
   *    chart elements.
   *  - placement: [Optional] Additional placement details describing where to put this marker, in relation
   *    to the data point.
   * You can omit the last two values when using this function.
   */
  public function addValueMarkers() {
    $args = func_get_args();
    $this->setProperty('chm', $this->encodeData($args, ','), true);
  }

  /**
   * @brief Prepares the Data Set String
   */
  protected function setDataSetString() {
    if(!empty($this->values)) {
      $this -> setProperty('chd', $this->getEncodingType().$this->getDataCount().':'.$this->encodeData($this->values,',',$this->getEncodingType()));
    }
  }

  /**
   * @brief Returns the url code for the image.
   */
  public function getUrl(){
        $fullUrl = "http://";
        if(isset($this->serverNum))
            $fullUrl .= $this->getServerNumber().".";
        $fullUrl .= $this->baseUrl;
        $this -> setDataSetString();
        $parms = array();
        foreach ($this -> chart as $key => $value) {
            $parms[] = $key.'='.$value;
        }
        return $fullUrl.implode('&amp;', $parms);
}

  /**
   * @brief Returns the html img code.
   *
   * This code is HTML 4.01 strict compliant.
   */
  public function getImgCode(){
    $code = '<img src="';
    $code .= $this->getUrl().'"';
    $code .= 'alt="gChartPhp Chart" width='.$this->width.' height='.$this->height.'>';
    print($code);
  }
  /**
   * @brief Serversite chart renderer
   *
   * See view.html and img.php for an example of how to use this function.
   * Please refer to the API documentation for further examples.
   *
   * @param $post Bool If true, the renderer will use a POST request for the image. If false, the
   *                   renderer will use the standard url request. By default, the renderer will use
   *                   the url request.
   */
  public function renderImage($post = false) {
    header('Content-type: image/png');
    if ($post) {
      $this->setDataSetString();
      $url = 'http://chart.apis.google.com/chart?chid=' . md5(uniqid(rand(), true));
      $context = stream_context_create(
        array('http' => array(
          'method' => 'POST',
          'header' => 'Content-type: application/x-www-form-urlencoded' . "\r\n",
          'content' => urldecode(http_build_query($this->chart, '', '&')))));
        fpassthru(fopen($url, 'r', false, $context));
    } else {
      $url = str_replace('&amp;', '&', $this->getUrl());
      readfile($url);
    }
  }
}

class gPieChart extends gChart{
  function __construct($width = 350, $height = 200) {
    $this -> setProperty('cht', 'p');
    $this -> setDimensions($width, $height);
  }
  public function getApplicableLabels($labels) {
    return array_splice($labels, 0, count($this->values[0]));
  }
  public function set3D($is3d = true, $resize = true){
    if($is3d){
      $this -> setProperty('cht', 'p3');
      if ($resize)
        $this -> setDimensions($this->getWidth() * 1.5, $this->getHeight());
    }
    else {
      $this -> setProperty('cht', 'p');
      if ($resize)
        $this -> setDimensions($this->getWidth() / 1.5, $this->getHeight());
    }
  }
  /**
   * @brief Sets the labels for Pie Charts
   *
   * @param $labels Array
   */
  public function setLabels($labels) {
    $this -> setProperty('chl', urlencode($this->encodeData($this->getApplicableLabels($labels),"|")));
  }
  /**
   * @brief Rotates the chart.
   *
   * By default, the first series is drawn starting at 3:00, continuing clockwise around the chart, but
   * you can specify a custom rotation using this function.
   *
   * @param $angle Integer A floating point value describing how many radians to rotate the chart clockwise.
   *                       One complete turn is 2 pi radiants (2 pi is about 6.2831).
   * @param $degree Bool Specifies if $angle is in degrees and not in radians. The function will to the conversion.
   */
  public function setRotation($angle, $degree = false) {
    if ($degree)
      $angle = ($angle / 360) * 6.2831;
    $this -> setProperty('chp', $angle);
  }
  /**
   * @brief Sets the colors for element of the chart.
   *
   * This is the basic function. The data in the array are interpreted as one color one slice. If you are
   * using gConcentricPieChart(), consider using setColors() for more customization.
   *
   * @param $colors Array Specifies colors using a 6-character string of hexadecimal values,
   *                      plus two optional transparency values, in the format RRGGBB[AA].
   */
  public function setColors($colors) {
    $this -> setProperty('chco', $this->encodeData($this->getApplicableLabels($colors), "|"), true);
  }
  /**
   * @brief Sets colors for each data set.
   *
   * This function allows you to specify colors for each individual slice of the chart or to specify a
   * color gradient. Usage:
   * - One color one slice: addColors(array($colorSlice1, .., $colorSliceN)). If there are less color than
   *   slices, the colors are repeated
   * - Gradient filling: addColors(array($gradientColor)). The chart will be colored in a gradient of
   *   $gradientColor
   * If you are using gConcentricPie class, run an instance of this function for each data set.
   *
   * @param $colors Array Specifies colors using a 6-character string of hexadecimal values,
   *                      plus two optional transparency values, in the format RRGGBB[AA]
   */
  public function addColors($colors) {
    $this -> setProperty('chco', $this->encodeData($colors, "|"), true, ",");
  }
}
/**
 * @brief 3-dimensional Pie Chart
 */
class gPie3DChart extends gPieChart {
  function __construct($width = 500, $height = 200) {
    $this -> setProperty('cht', 'p3');
    $this -> setDimensions($width, $height);
  }
}
/**
 * @brief Concentric Pie Chart
 */
class gConcentricPieChart extends gPieChart {
  function __construct($width = 350, $height = 200) {
    $this -> setProperty('cht', 'pc');
    $this -> setDimensions($width, $height);
  }
  /**
   * @brief Returns the applicable labels for the chart.
   *
   * This function counts recursively the numeber of values in the $values array.
   * @return Array Applicable labels
   */
  public function getApplicableLabels($labels) {
    return array_splice($labels, 0, count($this->values, COUNT_RECURSIVE));
  }
  /**
   * @brief Adds the legend for Concentric Pie Charts
   *
   * Run an instance of this function for each data set.
   *
   * @param $labels Array
   */
  public function addLegend($labels) {
    $this -> setProperty('chdl', urlencode($this->encodeData($this->getApplicableLabels($labels),"|")), true);
  }
}

class gLineChart extends gChart{

  function __construct($width = 200, $height = 200){
    $this -> setProperty('cht', 'lc');
    $this -> setDimensions($width, $height);
  }
  public function getUrl() {
    $retStr = parent::getUrl();
    return $retStr;
  }
}

class gBarChart extends gChart{
  /**
   * @brief Constructor for the gBarChart
   *
   * With this constructor you can specify all the type of Bar Charts.
   *
   * @param $width Integer Width of the chart, in pixels. Default value is 200.
   * @param $height Integer Height of the chart, in pixels. Default value is 200.
   * @param $type String Chooses the type of chart. Use 'g' for grouped chart, 's' for stacked, 'o' for overlapped
   * @param $direction String Chooses the direction of the chart. Use 'v' for vertical, 'h' for horizontal
   */
  function __construct($width = 200, $height = 200, $type = 'g', $direction='v'){
    $this -> setChartType($type, $direction);
    $this -> setDimensions($width, $height);
  }
  protected function setChartType($type, $direction) {
    $this-> setProperty('cht', 'b'.$direction.$type);
  }
  public function getUrl(){
    $retStr = parent::getUrl();
    return $retStr;
  }
  /**
   * @brief Specifies custom values for bar widths and spacing between bars and groups.
   *
   * You can only specify one set of width values for all bars. If you don't set this, all bars will be 23 pixels wide,
   * which means that the end bars can be clipped if the total bar + space width is wider than the chart width.
   *
   * @param $barWidth Integer The width of the bar. You can specify widths and spacing absolutely. Default
   *                          value is 23 pixels, absolute value.
   * @param $spaceBetweenBars Integer Space between bars in the same group. This is a width in pixels. Default value is 4 pixels
   *                                  for absolute values.
   * @param $spaceBetweenGroups Integer Space between bar groups in the same group. This is a width in pixels; Default value
   *                                    is 8 pixels for absolute values.
   */
  public function setBarWidth($barWidth, $spaceBetweenBars = 4,$spaceBetweenGroups = 8){
    $this -> setProperty('chbh', $this->encodeData(array($barWidth, $spaceBetweenBars,$spaceBetweenGroups), ','));
  }
  /**
   * @brief Resize values automatically
   */
  public function setAutoBarWidth() {
    $this -> setProperty('chbh', 'a');
  }
  /**
   * @brief Specify custom values for bar widths and spacing between bars and groups.
   *
   * You can specify widths and spacing absolutely or relatively, by entering one of the following values.
   *
   * @param $barScale String You can specify widths and spacing absolutely or relatively, by entering one of the following values:
   *                         - a: space_between_bars and space_between_groups  are given in absolute units (or default absolute
   *                             values, if not specified). Bars will be resized so that all bars will fit in the chart.
   *                         - r: space_between_bars and space_between_groups are given in relative units (or default relative values,
   *                              if not specified) Relative units are floating point values compared to the bar width, where the bar
   *                              width is 1.0: for example, 0.5 is half the bar width, 2.0 is twice the bar width. Bars can be clipped
   *                              if the chart isn't wide enough.
   *                         Default value is 'a'
   * @param $spaceBetweenBars Integer Space between bars in the same group. This is a width in pixels. Default value is 4 pixels
   *                                  for absolute values.
   * @param $spaceBetweenGroups Integer Space between bar groups in the same group. This is a width in pixels; Default value
   *                                    is 8 pixels for absolute values.
   */
  public function setBarScale($barScale = 'a', $spaceBetweenBars = '4',$spaceBetweenGroups = '8') {
    $this -> setProperty('chbh', $this->encodeData(array($barScale, $spaceBetweenBars,$spaceBetweenGroups), ','));
  }
  /**
   * @brief Sets colors for each data set.
   *
   * This function allows you to specify colors for each individual slice of the chart or to specify a
   * color gradient. Usage:
   * - One color one bar: addColors(array($colorBar1, .., $colorBarN)). If there are less colors than
   *   bars, colors will be repeated
   *
   * @param $colors Array Specifies colors using a 6-character string of hexadecimal values,
   *                      plus two optional transparency values, in the format RRGGBB[AA]
   */
  public function addColors($colors) {
    $this -> setProperty('chco', $this->encodeData($colors, "|"), true, ",");
  }
}
class gGroupedBarChart extends gBarChart{
  function __construct($width = 200, $height = 200){
    $this -> setChartType('g', 'v');
    $this -> setDimensions($width, $height);
  }
  public function setHorizontal($isHorizontal = true){
    if($isHorizontal) {
      $this -> setChartType('g', 'h');
    } else {
      $this -> setChartType('g', 'v');
    }
  }
}
class gStackedBarChart extends gBarChart{
  function __construct($width = 200, $height = 200){
    $this -> setChartType('s', 'v');
    $this -> setDimensions($width, $height);
  }
  public function setHorizontal($isHorizontal = true){
    if($isHorizontal){
      $this -> setChartType('s', 'h');
    }
    else{
      $this -> setChartType('s', 'v');
    }
  }
}
class gOverlappedBarChart extends gBarChart{
  function __construct($width = 200, $height = 200){
    $this -> setChartType('o', 'v');
    $this->setDimensions($width, $height);
  }
  public function setHorizontal($isHorizontal = true){
    if($isHorizontal){
      $this -> setChartType('o', 'h');
    }
    else{
      $this -> setChartType('o', 'v');
    }
  }
}

class gVennDiagram extends gChart{

  private $sizes;
  private $intersections;
  private $numData;

  function __construct($width = 200, $height = 200){
    $this -> setProperty('cht', 'v');
    $this -> setDimensions($width, $height);
    $this -> sizes = array(0,0,0);
    $this -> intersections = array(0,0,0,0);
    $this->numData = 2;
  }
  public function setSizes($A=0, $B=0, $C=0){
    if ($C)
      $this->numData = 3;
    $this->sizes = array($A, $B, $C);
  }
  public function setIntersections($AB=0, $AC=0, $BC=0, $ABC=0){
    $this->intersections = array($AB, $AC, $BC, $ABC);
  }
  public function setDataSetString(){
    $fullDataSet = array_merge($this->sizes, $this->intersections);
    $this -> setProperty('chd', $this->getEncodingType().":".$this->encodeData($fullDataSet, ',', $this->getEncodingType()));
  }
  public function getApplicableLabels($labels) {
    return array_splice($labels, 0, $this->numData);
  }
}

class gFormula extends gChart{
  /**
   * @param $widht Integer It is set by default to 0 because the server will size the png automatically
   * @param $height Integer It is set by default to 0 because the server will size the png automatically
   */
  function __construct($width = 0, $height = 0){
    $this -> setDimensions($width, $height);
    $this -> setProperty('cht','tx');
  }

  public function setLatexCode($latexCode){
    $this -> setProperty('chl', urlencode($latexCode));
  }
  public function setTextColor($textColor){
    $this -> setProperty('chco', $textColor);
  }

  public function getImgCode(){
    $code = '<img src="';
    $code .= $this->getUrl().'"';
    $code .= 'alt="gChartPhp Chart"';
    if($this->width)
      $code .= ' width='.$this->width;
    if($this->height)
      $code .= ' height='.$this->height;
    $code .= '>';
    print($code);
  }
}

class gQRCode extends gChart{

  function __construct($width = 150, $height = 150){
    $this -> setDimensions($width, $height);
    $this -> setProperty('cht','qr');
  }

  public function setQRCode($QRCode){
    $this -> setProperty('chl', urlencode($QRCode));
  }
  /**
   * @param $newOutputEncoding String Please refer to the documentation for the acceptable values
   */
  public function setOutputEncoding($newOutputEncoding){
    $this -> setProperty('choe', $newOutputEncoding);
  }
  /**
   * @param $newErrorCorrectionLevel String Please refer to the documentation for the acceptable values
   * @param $newMargin Integer Please refer to the documentation for the acceptable values
   */
  public function setErrorCorrectionLevel($newErrorCorrectionLevel, $newMargin){
    $this -> setProperty('chld', $newErrorCorrectionLevel.'|'.$newMargin);
  }
}

class gMeterChart extends gChart{
  /**
   * @brief Google-o-Meter Chart constructor.
   *
   * Please see documentation for specia usage of functions setVisibleAxes(), addAxisLabel(), and setColors().
   */
  function __construct($width = 200, $height = 200){
    $this -> setDimensions($width, $height);
    $this -> setProperty('cht','gom');
  }
  public function getApplicableLabels($labels) {
    return array_splice($labels, 0, count($this->values[0]));
  }
  /**
   * @brief Sets the labels for each arrow
   *
   * You can obtain the same result of this function by setting visible axis x and adding the labels on that axis.
   */
  public function setLabels($labels) {
    $this -> setProperty('chl', urlencode($this->encodeData($this->getApplicableLabels($labels),"|")));
  }
}

class gMapChart extends gChart {
  /**
   * @brief Map Chart constructor.
   *
   * Maximum size for a map is 440x220, this is the defaul size.
   */
  function __construct($width = 440, $height = 220){
    $this -> setDimensions($width, $height);
    $this -> setProperty('cht','t');
  }

  /**
   * @brief Geographical area shown in the chart.
   *
   * @param $zoomArea String One of the following values: africa, asia, europe, middle_east, south_america, usa, world
   */
  public function setZoomArea($zoomArea) {
    $this -> setProperty('chtm', $zoomArea);
  }
  /**
   * @brief A list of countries or states to which you are applying values.
   *
   * @param $stateCodes Array These are a set of two-character codes. Use either of the following types (you cannot mix types):
   *                          ISO 3166-1-alpha-2 codes for countries, {@link http://www.iso.org/iso/english_country_names_and_code_elements}
     *                          USA state code
   */
  public function setStateCodes($stateCodes){
    $this -> setProperty('chld', $this->encodeData($stateCodes, ''));
  }
  /**
   * @brief Specifies the colors of the chart
   *
   * @param $defaultColor String The color of regions that do not have data assigned. An RRGGBB format
   *                             hexadecimal number. Suggested value is BEBEBE (medium gray).
   * @param $gradientColors Array Optional. The colors corresponding to the gradient values in the data
   *                              format range. RRGGBB format hexadecimal numbers. The default values are
   *                              0000FF and FF0000.
   */
  public function setColors($defaultColor) {
    $gradientColors = (func_num_args() > 1) ? func_get_arg(1) : array('0000FF', 'FF0000');
    $this -> setProperty('chco', $this->encodeData(array_merge(array($defaultColor), $gradientColors), ','));
  }

  public function getApplicableLabels($labels) {
    return array_splice($labels, 0, count($this->values[0]));
  }
}
class gScatterChart extends gChart{
  function __construct($width = 200, $height = 200){
    $this -> setDimensions($width, $height);
    $this -> setProperty('cht','s');
  }
  /**
   * @brief Returns the applicable labels
   *
   * There is no reason to use this function. Please refer to the documentation to know how to use colors and legend.
   */
  public function getApplicableLabels($labels) {
    return $labels;
  }
  /**
   * @brief Sets the colors for the chart.
   *
   * It has a different separator than the one in the parent class
   */
  public function setColors($colors) {
    $this -> setProperty('chco', $this->encodeData($this->getApplicableLabels($colors),"|"));
  }
}
